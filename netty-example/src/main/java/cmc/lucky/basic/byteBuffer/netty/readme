1.堆内和堆外的区别
    /**
     * headbyteBuf：内存的分配和回收速度快，可以被JVM自动回收，缺点就是如果进行sockett的IO读写，需要额外做一次内存复制，将对外内存对应的缓冲区赋值到内核channel中，性能有一定程度的下降
     * DirectByteBuf：非堆内存，在堆外进行内存分配，相比堆内存，分配和回收速度会慢一些，但是写入或者从socketchannel中读取时，少了一次的内存复制，速度比堆内存快
     */


    /**
     * 经验表明，ByteBuf的最佳实践是在IO线程的读写缓冲区使用DirectByteBuf，后端业务消息的编解码使用headbyteBuf
     */

2.池化和非池化的区别
UnpooledHeapByteBuf和PooledHeapByteBuf
基于对象池的bytebuf和普通的bytebuf，两者的主要区别就是基于对象池的ByteBuf可以重用bytebuf对象，他自己维护了一个内存池，可以循环利用创建的bytebuf，提升内存的使用效率，降低由于高负载导致的频繁的gc
但是内存池的管理和维护更加复杂，使用起来也需要更加的谨慎